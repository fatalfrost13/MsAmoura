@model Amoura.Web.Models.AccountModel

@{
    var update = false;
    if (User.Identity.IsAuthenticated)
    {
        update = true;
    }    
}

<script>
    var oldIE;
    if ($('html').is('.ie6, .ie7, .ie8, .ie9')) {
        oldIE = true;
    }

</script>

<script>
    function check(input) {
        if (!oldIE) {
            if (input.value != document.getElementById('Password').value) {
                input.setCustomValidity('The two passwords must match.');
            } else {
                // input is valid -- reset the error message
                input.setCustomValidity('');
            }
        }
    }
</script>


<script type="text/javascript">

    function checkForm() {

        var form = document.getElementById("createAccountForm");
        if (form.FirstName.value == "") {
            alert("Error: First Name cannot be blank!");
            form.FirstName.focus();
            return false;
        }
        if (form.LastName.value == "") {
            alert("Error: Last Name cannot be blank!");
            form.LastName.focus();
            return false;
        }
        if (form.Email.value == "") {
            alert("Error: Email cannot be blank!");
            form.Email.focus();
            return false;
        }
        if (form.Password.value == "") {
            alert("Error: Password cannot be blank!");
            form.Password.focus();
            return false;
        }

        if (form.Password.value != "" && form.Password.value != form.ConfirmPassword.value) {
            alert("Error: Passwords must match!");
            form.Password.focus();
            return false;
        }
        return true;
    }

</script>


@using (Html.BeginUmbracoForm<Amoura.Web.Controllers.MembershipController>
    ("CreateUpdateAccount", null,
    new { id = "createAccountForm", @class = "amouraForm" }))
{
    if (TempData["UserValidated"] == null || TempData["UserValidated"].ToString() == "0")
    { 
    
    <div class="row">
        <span class="requiredField">*</span> indicates a mandatory field
    </div>
    <br/>
    @Html.HiddenFor(i => i.MemberId)
    <div class="row">
        <div class="col1">
            <span class="requiredField">*</span>
        </div>
        <div class="col2">
            @Html.LabelFor(i => i.FirstName):
        </div>
        <div class="col3">
            @Html.TextBoxFor(i => i.FirstName, new { value = "", required="true", placeholder = "First Name" })
        </div>
    </div>
    <div class="row">
        <div class="col1">
            <span class="requiredField">*</span>
        </div>
        <div class="col2">
            @Html.LabelFor(i => i.LastName):
        </div>
        <div class="col3">
            @Html.TextBoxFor(i => i.LastName, new { value = "", required="true", placeholder = "Last Name" })
        </div>
    </div>
    
    <div class="row" 
        @if (update)
        { 
            @:style="display:none;" 
        }>
        <div class="col1">
            <span class="requiredField">*</span>
        </div>
        <div class="col2">
            @Html.LabelFor(i => i.Email):
        </div>
        <div class="col3">
            @Html.TextBoxFor(i => i.Email, new { value = "", required="true", placeholder = "Email Address", type="email" })
        </div>
    </div>
    
    <div class="row">
        <div class="col1">
            <span class="requiredField">&nbsp;</span>
        </div>
        <div class="col2">
            @Html.LabelFor(i => i.Bio):
        </div>
        <div class="col3">
            @Html.TextAreaFor(i => i.Bio, new { value = "", @class="bioField", placeholder = "Profile Bio" })
        </div>
    </div>
    if (!update)
    {
        <div class="row">
            <div class="col1">
                <span class="requiredField">*</span>
            </div>
            <div class="col2">
                @Html.LabelFor(i => i.Password):
            </div>
            <div class="col3">
                @Html.PasswordFor(i => i.Password, new { value = "", required="true", placeholder = "Password", type = "password" })
            </div>
        </div>
            <div class="row">
                <div class="col1">
                    <span class="requiredField">*</span>
                </div>
                <div class="col2">
                    @Html.LabelFor(i => i.ConfirmPassword):
                </div>
                <div class="col3">
                    @Html.PasswordFor(i => i.ConfirmPassword, new { value = "", required = "true", placeholder = "Re-type Password", 
                   type = "password",  oninput = "check(this)" })
                </div>
            </div>
    }
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col1">
            &nbsp;
        </div>
        <div class="col2">
            &nbsp;
        </div>
        <div class="col3">
            <input type="submit" name="submit" value="Submit" id="btnSubmit" />
            &nbsp;
            <input type="reset" value="Reset" id="btnReset" />
        </div>
    </div>

    
<script>
    if (oldIE) {
        //alert('old ie');
        $('#btnSubmit').click(function () {
            return checkForm();
        });
    } 
    else {
        //alert('nice browser');
    }
</script>    

    var errorMessage = "";
    var customErrors = ViewContext.ViewData.ModelState.SingleOrDefault(i => i.Key == "CustomError");
    if (customErrors.Value != null && customErrors.Value.Errors.Any())
    {
        var error = customErrors.Value.Errors.SingleOrDefault();
        if (error != null)
        {
            errorMessage = error.Exception.Message;
        }
    }
    if (errorMessage != string.Empty)
    {
    <br/>
    <div class="row">
        <div class="col1">
            &nbsp;
        </div>
        <div class="col2">
            &nbsp;
        </div>
        <div class="col3">
            <div style="color:red">
                @Html.Raw(errorMessage)
            </div>
        </div>
    </div>

    }

    }
    else
    {
    <div class="row">
        <div class="success">
            @Html.Raw(TempData["Message"].ToString())
        </div>
    </div>
}
    TempData["UserValidated"] = null;
    TempData["Message"] = null;    

}